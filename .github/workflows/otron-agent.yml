name: "ðŸ’¬ Otron Agent (Codex/GPT-5)"

on:
  pull_request_review_comment:
    types:
      - created
  pull_request_review:
    types:
      - submitted
  issue_comment:
    types:
      - created

concurrency:
  group: "${{ github.workflow }}-${{ github.event.issue.number }}"
  cancel-in-progress: |-
    ${{ github.event.sender.type == 'User' && ( github.event.issue.author_association == 'OWNER' || github.event.issue.author_association == 'MEMBER' || github.event.issue.author_association == 'COLLABORATOR') }}

defaults:
  run:
    shell: bash

permissions:
  contents: write
  id-token: write
  pull-requests: write
  issues: write

jobs:
  otron-agent:
    if: |-
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'issues' && github.event.action == 'opened' &&
        contains(github.event.issue.body, '@otron-agent') &&
        !contains(github.event.issue.body, '@otron-agent /review') &&
        !contains(github.event.issue.body, '@otron-agent /triage') &&
        (
          contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.issue.author_association) ||
          github.event.sender.type == 'Bot'
        )
      ) ||
      (
        (
          github.event_name == 'issue_comment' ||
          github.event_name == 'pull_request_review_comment'
        ) &&
        contains(github.event.comment.body, '@otron-agent') &&
        !contains(github.event.comment.body, '@otron-agent /review') &&
        !contains(github.event.comment.body, '@otron-agent /triage') &&
        (
          contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association) ||
          github.event.sender.type == 'Bot'
        )
      ) ||
      (
        github.event_name == 'pull_request_review' &&
        contains(github.event.review.body, '@otron-agent') &&
        !contains(github.event.review.body, '@otron-agent /review') &&
        !contains(github.event.review.body, '@otron-agent /triage') &&
        (
          contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.review.author_association) ||
          github.event.sender.type == 'Bot'
        )
      )
    timeout-minutes: 15
    runs-on: ubuntu-latest

    steps:
      - name: Generate GitHub App Token
        id: generate_token
        if: ${{ vars.APP_ID }}
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Get context from event
        id: get_context
        env:
          EVENT_NAME: ${{ github.event_name }}
          EVENT_PAYLOAD: ${{ toJSON(github.event) }}
        run: |-
          set -euo pipefail

          USER_REQUEST=""
          ISSUE_NUMBER=""
          IS_PR="false"

          if [[ "${EVENT_NAME}" == "issues" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .issue.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .issue.number)
          elif [[ "${EVENT_NAME}" == "issue_comment" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .comment.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .issue.number)
            if [[ $(echo "${EVENT_PAYLOAD}" | jq -r .issue.pull_request) != "null" ]]; then
              IS_PR="true"
            fi
          elif [[ "${EVENT_NAME}" == "pull_request_review" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .review.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .pull_request.number)
            IS_PR="true"
          elif [[ "${EVENT_NAME}" == "pull_request_review_comment" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .comment.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .pull_request.number)
            IS_PR="true"
          fi

          # Clean up user request
          USER_REQUEST=$(echo "${USER_REQUEST}" | sed 's/.*@otron-agent//' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          # Normalize line endings
          USER_REQUEST=$(echo "${USER_REQUEST}" | tr -d '\r')

          DELIM="UR_EOF_$(date +%s%N)"
          {
            echo "user_request<<${DELIM}"
            echo "${USER_REQUEST}"
            echo "${DELIM}"
            echo "issue_number=${ISSUE_NUMBER}"
            echo "is_pr=${IS_PR}"
          } >> "${GITHUB_OUTPUT}"

      - name: Set up git user for commits
        run: |-
          git config --global user.name 'otron-agent[bot]'
          git config --global user.email 'otron-agent[bot]@users.noreply.github.com'

      - name: Checkout PR branch
        if: ${{  steps.get_context.outputs.is_pr == 'true' }}
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          ref: refs/pull/${{ steps.get_context.outputs.issue_number }}/head
          fetch-depth: 0

      - name: Checkout main branch
        if: ${{  steps.get_context.outputs.is_pr == 'false' }}
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          fetch-depth: 0

      - name: Acknowledge request
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ steps.get_context.outputs.issue_number }}
          REPOSITORY: ${{ github.repository }}
        run: |-
          set -euo pipefail
          MESSAGE="@${GITHUB_ACTOR} Acknowledged. Running Otron Agent (Codex GPT-5)â€¦"
          gh issue comment "${ISSUE_NUMBER}" --body "${MESSAGE}" --repo "${REPOSITORY}"

      - name: Get description
        id: get_description
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          IS_PR: ${{ steps.get_context.outputs.is_pr }}
          ISSUE_NUMBER: ${{ steps.get_context.outputs.issue_number }}
        run: |-
          set -euo pipefail
          if [[ "${IS_PR}" == "true" ]]; then
            DESCRIPTION=$(gh pr view "${ISSUE_NUMBER}" --json body --template '{{.body}}')
          else
            DESCRIPTION=$(gh issue view "${ISSUE_NUMBER}" --json body --template '{{.body}}')
          fi
          DESCRIPTION=$(echo "${DESCRIPTION}" | tr -d '\r')
          DDELIM="DESC_EOF_$(date +%s%N)"
          {
            echo "description<<${DDELIM}"
            echo "${DESCRIPTION}"
            echo "${DDELIM}"
          } >> "${GITHUB_OUTPUT}"

      - name: Get comments
        id: get_comments
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          IS_PR: ${{ steps.get_context.outputs.is_pr }}
          ISSUE_NUMBER: ${{ steps.get_context.outputs.issue_number }}
        run: |-
          set -euo pipefail
          if [[ "${IS_PR}" == "true" ]]; then
            COMMENTS=$(gh pr view "${ISSUE_NUMBER}" --json comments --template '{{range .comments}}{{.author.login}}: {{.body}}{{"\n"}}{{end}}')
          else
            COMMENTS=$(gh issue view "${ISSUE_NUMBER}" --json comments --template '{{range .comments}}{{.author.login}}: {{.body}}{{"\n"}}{{end}}')
          fi
          COMMENTS=$(echo "${COMMENTS}" | tr -d '\r')
          CDELIM="COMM_EOF_$(date +%s%N)"
          {
            echo "comments<<${CDELIM}"
            echo "${COMMENTS}"
            echo "${CDELIM}"
          } >> "${GITHUB_OUTPUT}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Codex CLI
        run: npm i -g @openai/codex

      - name: Run Codex (GPT-5)
        id: run_codex
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          REPOSITORY: ${{ github.repository }}
          USER_REQUEST: ${{ steps.get_context.outputs.user_request }}
          ISSUE_NUMBER: ${{ steps.get_context.outputs.issue_number }}
          IS_PR: ${{ steps.get_context.outputs.is_pr }}
        run: |-
          set -euo pipefail
          if [[ -z "${OPENAI_API_KEY:-}" ]]; then
            echo "OPENAI_API_KEY is not set" >&2
            exit 1
          fi
          PROMPT=$(cat <<'EOF'
          You are an autonomous coding agent running in a GitHub Actions runner.
          Repository: ${REPOSITORY}
          Issue/PR number: ${ISSUE_NUMBER}
          Is PR: ${IS_PR}

          User request:
          ${USER_REQUEST}

          Context description:
          ${{ steps.get_description.outputs.description }}

          Recent comments:
          ${{ steps.get_comments.outputs.comments }}

          Task:
          - Apply the requested changes directly to the working tree of this repository.
          - Do NOT push or open PRs yourself; just modify files locally. Subsequent steps will commit/push.
          - Keep changes minimal and focused.
          - Output a concise summary of edits at the end.
          EOF
          )

          # Run codex in non-interactive, plain terminal mode
          export TERM=dumb
          export NO_COLOR=1
          export FORCE_COLOR=0
          export CI=1
          codex "${PROMPT}" | tee codex.out.md || true

      - name: Post result
        if: always()
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ steps.get_context.outputs.issue_number }}
        run: |-
          if [[ -f codex.out.md ]]; then
            gh issue comment "${ISSUE_NUMBER}" --body-file codex.out.md
          fi



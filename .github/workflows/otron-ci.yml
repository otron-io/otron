name: Otron Backend CI

on:
  push:
    branches: [main, develop]
    paths:
      - '**'
      - '.github/workflows/otron-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - '**'
      - '.github/workflows/otron-ci.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Build and Type Check
  build:
    name: Build & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        working-directory: .
        run: npm ci

      - name: Type check
        working-directory: .
        run: npm run check:types

      - name: Build
        working-directory: .
        run: npm run build

      - name: Upload build artifacts
        if: matrix.node-version == '20.x'
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/
          retention-days: 1

  # Job 2: Linting and Formatting
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        working-directory: .
        run: npm ci

      - name: Run Biome check
        working-directory: .
        run: npm run check

      - name: Check formatting
        working-directory: .
        run: npm run check:formatting

      - name: Check linting
        working-directory: .
        run: npm run check:linting

  # Job 3: Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build]

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        working-directory: .
        run: npm ci

      - name: Run unit tests
        working-directory: .
        run: npm test
        env:
          NODE_ENV: test

      - name: Generate coverage report
        if: matrix.node-version == '20.x'
        working-directory: .
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage
          flags: backend
          name: otron-backend-coverage

  # Job 4: Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        working-directory: .
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist/

      - name: Run integration tests
        working-directory: .
        run: npm run test:integration
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379
          # Add other test environment variables

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results-${{ github.run_id }}
          path: test-results/
          retention-days: 7

  # Job 5: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        working-directory: .
        run: npm ci

      - name: Run security audit
        working-directory: .
        run: npm audit --audit-level=moderate

  # Final Job: Collect Results
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [build, lint, test, integration, security]
    if: always()

    steps:
      - name: Check all job results
        run: |
          if [[ "${{ needs.build.result }}" == "success" && \
                "${{ needs.lint.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.integration.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed:"
            echo "Build: ${{ needs.build.result }}"
            echo "Lint: ${{ needs.lint.result }}"
            echo "Test: ${{ needs.test.result }}"
            echo "Integration: ${{ needs.integration.result }}"
            echo "Security: ${{ needs.security.result }}"
            exit 1
          fi

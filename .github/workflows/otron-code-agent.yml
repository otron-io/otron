name: 'ðŸ’¬ Otron Agent'

on:
  pull_request_review_comment:
    types:
      - 'created'
  pull_request_review:
    types:
      - 'submitted'
  issue_comment:
    types:
      - 'created'

concurrency:
  group: '${{ github.workflow }}-${{ github.event.issue.number }}'
  cancel-in-progress: |-
    ${{ github.event.sender.type == 'User' && ( github.event.issue.author_association == 'OWNER' || github.event.issue.author_association == 'MEMBER' || github.event.issue.author_association == 'COLLABORATOR') }}

defaults:
  run:
    shell: 'bash'

permissions:
  contents: 'write'
  id-token: 'write'
  pull-requests: 'write'
  issues: 'write'

jobs:
  codex-cli:
    # This condition is complex to ensure we only run when explicitly invoked.
    if: |-
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'issues' && github.event.action == 'opened' &&
        contains(github.event.issue.body, '@otron-agent') &&
        !contains(github.event.issue.body, '@otron-agent /review') &&
        !contains(github.event.issue.body, '@otron-agent /triage') &&
        (
          contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.issue.author_association) ||
          github.event.sender.type == 'Bot'
        )
      ) ||
      (
        (
          github.event_name == 'issue_comment' ||
          github.event_name == 'pull_request_review_comment'
        ) &&
        contains(github.event.comment.body, '@otron-agent') &&
        !contains(github.event.comment.body, '@otron-agent /review') &&
        !contains(github.event.comment.body, '@otron-agent /triage') &&
        (
          contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association) ||
          github.event.sender.type == 'Bot'
        )
      ) ||
      (
        github.event_name == 'pull_request_review' &&
        contains(github.event.review.body, '@otron-agent') &&
        !contains(github.event.review.body, '@otron-agent /review') &&
        !contains(github.event.review.body, '@otron-agent /triage') &&
        (
          contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.review.author_association) ||
          github.event.sender.type == 'Bot'
        )
      )
    timeout-minutes: 10
    runs-on: 'ubuntu-latest'

    steps:
      - name: 'Generate GitHub App Token'
        id: 'generate_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e' # ratchet:actions/create-github-app-token@v2
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      - name: 'Get context from event'
        id: 'get_context'
        env:
          EVENT_NAME: '${{ github.event_name }}'
          EVENT_PAYLOAD: '${{ toJSON(github.event) }}'
        run: |-
          set -euo pipefail

          USER_REQUEST=""
          ISSUE_NUMBER=""
          IS_PR="false"

          if [[ "${EVENT_NAME}" == "issues" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .issue.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .issue.number)
          elif [[ "${EVENT_NAME}" == "issue_comment" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .comment.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .issue.number)
            if [[ $(echo "${EVENT_PAYLOAD}" | jq -r .issue.pull_request) != "null" ]]; then
              IS_PR="true"
            fi
          elif [[ "${EVENT_NAME}" == "pull_request_review" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .review.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .pull_request.number)
            IS_PR="true"
          elif [[ "${EVENT_NAME}" == "pull_request_review_comment" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .comment.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .pull_request.number)
            IS_PR="true"
          fi

          # Clean up user request
          USER_REQUEST=$(echo "${USER_REQUEST}" | sed 's/.*@otron-agent//' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          # Normalize line endings
          USER_REQUEST=$(echo "${USER_REQUEST}" | tr -d '\r')

          DELIM="UR_EOF_$(date +%s%N)"
          {
            echo "user_request<<${DELIM}"
            echo "${USER_REQUEST}"
            echo "${DELIM}"
            echo "issue_number=${ISSUE_NUMBER}"
            echo "is_pr=${IS_PR}"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Set up git user for commits'
        run: |-
          git config --global user.name 'otron-agent[bot]'
          git config --global user.email 'otron-agent[bot]@users.noreply.github.com'

      - name: 'Checkout PR branch'
        if: |-
          ${{  steps.get_context.outputs.is_pr == 'true' }}
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4
        with:
          token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          repository: '${{ github.repository }}'
          ref: 'refs/pull/${{ steps.get_context.outputs.issue_number }}/head'
          fetch-depth: 0

      - name: 'Checkout main branch'
        if: |-
          ${{  steps.get_context.outputs.is_pr == 'false' }}
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4
        with:
          token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          repository: '${{ github.repository }}'
          fetch-depth: 0

      - name: 'Acknowledge request'
        env:
          GITHUB_ACTOR: '${{ github.actor }}'
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
          REPOSITORY: '${{ github.repository }}'
          REQUEST_TYPE: '${{ steps.get_context.outputs.request_type }}'
        run: |-
          set -euo pipefail
          MESSAGE="@${GITHUB_ACTOR} I've received your request and I'm working on it now! ðŸ¤–"
          if [[ -n "${MESSAGE}" ]]; then
            gh issue comment "${ISSUE_NUMBER}" \
              --body "${MESSAGE}" \
              --repo "${REPOSITORY}"
          fi

      - name: 'Get description'
        id: 'get_description'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          IS_PR: '${{ steps.get_context.outputs.is_pr }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
        run: |-
          set -euo pipefail
          if [[ "${IS_PR}" == "true" ]]; then
            DESCRIPTION=$(gh pr view "${ISSUE_NUMBER}" --json body --template '{{.body}}')
          else
            DESCRIPTION=$(gh issue view "${ISSUE_NUMBER}" --json body --template '{{.body}}')
          fi
          DESCRIPTION=$(echo "${DESCRIPTION}" | tr -d '\r')
          DDELIM="DESC_EOF_$(date +%s%N)"
          {
            echo "description<<${DDELIM}"
            echo "${DESCRIPTION}"
            echo "${DDELIM}"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Get comments'
        id: 'get_comments'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          IS_PR: '${{ steps.get_context.outputs.is_pr }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
        run: |-
          set -euo pipefail
          if [[ "${IS_PR}" == "true" ]]; then
            COMMENTS=$(gh pr view "${ISSUE_NUMBER}" --json comments --template '{{range .comments}}{{.author.login}}: {{.body}}{{"\n"}}{{end}}')
          else
            COMMENTS=$(gh issue view "${ISSUE_NUMBER}" --json comments --template '{{range .comments}}{{.author.login}}: {{.body}}{{"\n"}}{{end}}')
          fi
          COMMENTS=$(echo "${COMMENTS}" | tr -d '\r')
          CDELIM="COMM_EOF_$(date +%s%N)"
          {
            echo "comments<<${CDELIM}"
            echo "${COMMENTS}"
            echo "${CDELIM}"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Set up Node.js'
        uses: 'actions/setup-node@v4'
        with:
          node-version: '20'

      - name: 'Install Codex CLI'
        run: |-
          npm install -g @openai/codex

      - name: 'Run Otron Agent (Codex)'
        id: 'run_codex'
        env:
          OPENAI_API_KEY: '${{ secrets.OPENAI_API_KEY }}'
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          REPOSITORY: '${{ github.repository }}'
          USER_REQUEST: '${{ steps.get_context.outputs.user_request }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
          IS_PR: '${{ steps.get_context.outputs.is_pr }}'
          DESCRIPTION: '${{ steps.get_description.outputs.description }}'
          COMMENTS: '${{ steps.get_comments.outputs.comments }}'
        run: |-
          set -euo pipefail
          PROMPT=$(cat <<EOF
          ## Role

          You are a helpful AI assistant invoked via a CLI interface in a GitHub workflow. You have access to tools to interact with the repository and respond to the user.

          ## Context

          - Repository: ${REPOSITORY}
          - Triggering Event: ${GITHUB_EVENT_NAME}
          - Issue/PR Number: ${ISSUE_NUMBER}
          - Is this a PR?: ${IS_PR}
          - Issue/PR Description:
          ${DESCRIPTION}
          - Comments:
          ${COMMENTS}

          ## User Request

          The user has sent the following request:
          ${USER_REQUEST}

          ## How to Respond to Issues, PR Comments, and Questions

          This workflow supports three main scenarios:

          1. Creating a Fix for an Issue
             - Carefully read the user request and the related issue or PR description.
             - Use available tools to gather all relevant context (e.g., gh issue view, gh pr view, gh pr diff, cat, head, tail).
             - Identify the root cause before proceeding.
             - Show and maintain a plan as a checklist using GitHub markdown checkboxes.
             - Make the necessary code or documentation changes.
             - Branching and Committing:
               - NEVER commit directly to the main branch.
               - If working on a PR, commit to the checked-out branch.
               - If working on an issue, create a new branch, push, and open a PR.
             - Summarize what was changed and why in response.md and post as a comment.

          2. Addressing Comments on a Pull Request
             - Read the specific comment and the context of the PR.
             - If the comment requests changes, follow the same process as for fixing an issue.
             - Commit and push changes to the PR branch.

          3. Answering Any Question on an Issue
             - Read the question and the full issue context.
             - Provide a clear, concise answer. If changes are required, follow the fix process.

          ## Guidelines

          - Be concise and actionable.
          - Always commit and push changes if you modify code or documentation.
          - If unsure, explain reasoning and ask clarifying questions.
          - Follow project conventions and best practices.
          EOF
          )
          export CI=true
          printf "%s\n" "$PROMPT" > prompt.txt
          TERM=dumb NO_COLOR=1 FORCE_COLOR=0 codex --full-auto -m gpt-5 < prompt.txt
